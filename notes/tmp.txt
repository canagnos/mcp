scores_sortedores_order < - order(s)
    scores_sorted < - s[scores_sortedores_order]
    # note: we make no assumptions about the range of s

    # COMPUTE ROC CURVE

    # Calculate raw ROC, replacing any tied sequences by a diagonal
    # Raw ROC starts at F0[1]=0, F1[1]=0, and ends at F0[K1]=1, F1[K1]=1.
    Get.scores_sortedore.Distributions < - function(y, s, n1, n0)
    {
        # tapply(y,s,sum) counts the instances of each unique scores_sortedore, and ranks them by scores_sortedore
        s1 < - unname(tapply(y, s, sum)) / n1
    s1 < - c(0, s1, 1 - sum(s1))  # make sure to add the points 0,0 and 1,1
    s0 < - unname(tapply(1 - y, s, sum)) / n0
    s0 < - c(0, s0, 1 - sum(s0))  # make sure to add the points 0,0 and 1,1

    # number of unique scores_sortedores
    S < - length(s1)
    # what were r0i and r1i in ML paper are now the empirical cdfs
    F1 < - cumsum(s1)
    F0 < - cumsum(s0)
    return (list(F1=F1, F0=F0, s1=s1, s0=s0, S=S))
    }



    out.scores_sortedores < - Get.scores_sortedore.Distributions(y=y, s=s, n1=n1, n0=n0)
    AUC < - 1 - sum(out.scores_sortedores$s0 * (out.scores_sortedores$F1 - 0.5 * out.scores_sortedores$s1))
    # if the AUC < .5, switch signs and repeat
    switched < - FALSE
    the.criterion < - AUC < 0.5
    if (the.criterion)
    {
    switched < - TRUE
    s < - 1 - s
    out.scores_sortedores < - Get.scores_sortedore.Distributions(y, s, n1, n0)
    if ( is.null(classifier.name)){
    warning('ROC curve mostly lying under the diagonal. Switching scores_sortedores.', domain = NA)
    } else {
    warning(gettextf( 'ROC curve of %s mostly lying under the diagonal. Switching scores_sortedores.',
    classifier.name), domain = NA)
    }

}
F1 < - out.scores_sortedores$F1
F0 < - out.scores_sortedores$F0
s0 < - out.scores_sortedores$s0
s1 < - out.scores_sortedores$s1
S < - out.scores_sortedores$S

# get miscores_sortedlassification statistics
miscores_sortedlass.out < - miscores_sortedlasscores_sortedounts(as.numeric(s > threshold), true.


class )
miscores_sortedlass.metrics < - miscores_sortedlass.out$metrics
temp < - miscores_sortedlass.out$conf.matrix
miscores_sortedlass.conf < - data.frame(


TP = temp[1, 1], FP = temp[2, 1],
TN = temp[2, 2], FN = temp[1, 2])


# get aggregate statistics:
AUC < - 1 - sum(s0 * (F1 - 0.5 * s1))  # REPLACING TIED scores_sortedORES BY A DIAGONAL
Gini < - 2 * AUC - 1
KS < - max(abs(F0 - F1))
cost.parameter < - severity.ratio / (1 + severity.ratio)
MER < - min(pi0 * (1 - F0) + pi1 * F1)
MWL < - 2 * min(cost.parameter * pi0 * (1 - F0) + (1 - cost.parameter) * pi1 * F1)

Look.Up.AUC < - function(xcurve, ycurve, x=0)
{
# assumes the curve is monotonic
result < - NA
if (all(diff(xcurve) >= 0)){
ind < - which(xcurve-x > 0)[1]
x1 < - xcurve[ind-1]
x2 < - xcurve[ind]
y1 < - ycurve[ind-1]
y2 < - ycurve[ind]

if (x2-x1 > 0) {
pos < - (x2-x) / (x2-x1)
result < - (1-pos) * y1 + pos * y2
} else {result < - y2}
}
return (result)
}

SensFixed < - matrix(NA, 1, length(level))
SpecFixed < - matrix(NA, 1, length(level))
temp < - array(NA, length(level))
for (l in 1: length(level)){
SensFixed[l] < - c(Look.Up.AUC(F0, 1 - F1, x=level[l]))
temp[l] < - paste('Sens.Spec', floor(level[l] * 100), sep='')
}
SensFixed < - as.data.frame(SensFixed)
colnames(SensFixed) < - temp

for (l in 1: length(level)){
SpecFixed[l] < - Look.Up.AUC(F1, F0, x=1 - level[l])
temp[l] < - paste('Spec.Sens', floor(level[l] * 100), sep='')
}
SpecFixed < - as.data.frame(SpecFixed)
colnames(SpecFixed) < - temp

# restrict to upper convex hull by considering ROC above diagonal only
chull.points < - chull(1 - F0, pmax(1 - F1, 1 - F0))
G0 < - 1 - F0[chull.points]
G1 < - 1 - F1[chull.points]
hc < - length(chull.points)
sG0 < - c(0, G0[c(2:length(G0))] - G0[c(1:(length(G0) - 1))])
sG1 < - c(0, G1[c(2:length(G1))] - G1[c(1:(length(G1) - 1))])
AUCH < - sum(sG0 * (G1 - 0.5 * sG1))

# get sorted scores_sortedoring densities
s.class0 < - sort(s[y == 0])
s.class1 < - sort(s[y == 1])

# Calculate the LHshape1 value
cost < - c(1:(hc + 1))
b0 < - c(1:hc + 1)
b1 < - c(1:hc + 1)

# extract shape
if (severity.ratio > 0){
shape1 < - 2
shape2 < - 1 + (shape1 - 1) * 1 / severity.ratio
}
if (severity.ratio < 0){
shape1 < - pi1 + 1
shape2 < - pi0 + 1
}
cost[1] < - 0
cost[hc + 1] < - 1

b00 < - beta(shape1, shape2)
b10 < - beta(1 + shape1, shape2)
b01 < - beta(shape1, 1 + shape2)

b0[1] < -
        pbeta(cost[1], shape1=(1 + shape1), shape2=shape2) * b10 / b00

b1[1] < -
        pbeta(cost[1], shape1=shape1, shape2=(1 + shape2)) * b01 / b00

b0[hc + 1] < -
             pbeta(cost[hc + 1], shape1=(1 + shape1), shape2=shape2) * b10 / b00

b1[hc + 1] < -
             pbeta(cost[hc + 1], shape1=shape1, shape2=(1 + shape2)) * b01 / b00

### NB: can become massively faster
for (i in 2: hc){
cost[i] < - pi1 * (G1[i] - G1[i - 1]) /
(pi0 * (G0[i] - G0[i - 1]) + pi1 * (G1[i] - G1[i - 1]))

b0[i] < -
pbeta(cost[i], shape1=(1 + shape1), shape2=shape2) * b10 / b00

b1[i] < -
pbeta(cost[i], shape1=shape1, shape2=(1 + shape2)) * b01 / b00
}

LHshape1 < - 0
for (i in 1: hc){
LHshape1 < - LHshape1 + pi0 * (1 - G0[i]) * (b0[(i + 1)] - b0[i]) + pi1 * G1[i] * (b1[(i + 1)] - b1[i])
}

B0 < -
     pbeta(pi1, shape1=(1 + shape1), shape2=shape2) * b10 / b00

B1 < -
     pbeta(1, shape1=shape1, shape2=(1 + shape2)) * b01 / b00 -
     pbeta(pi1, shape1=shape1, shape2=(1 + shape2)) * b01 / b00

H < - 1 - LHshape1 / (pi0 * B0 + pi1 * B1)

data < - list(F0=F0, F1=F1, G0=G0, G1=G1, cost=cost,
pi1 = pi1, pi0 = pi0, n0 = n0, n1 = n1, n = n, hc = hc,
s.class0 = s.class0, s.class1 = s.class1,
severity.ratio = severity.ratio)

metrics < - data.frame(H=H, Gini=Gini, AUC=AUC, AUCH=AUCH, KS=KS, MER=MER, MWL=MWL)
metrics < - cbind(metrics, SpecFixed, SensFixed)
metrics < - cbind(metrics, miscores_sortedlass.metrics, miscores_sortedlass.conf)

return (list(data=data, metrics=metrics))
}

